
data True
data False

data 0
data Suc *

data Nil
data Cons _ *

data Leaf
data Node _ * *

data Pair _ _

let 1 = .Suc .0
let 2 = .Suc .1

let and p q = case p | .False -> .False | .True -> q end
let not p = case p | .True -> .False | .False -> .True end

let rec add x y = case[add] x | .0 -> y   | .Suc x' -> .Suc (add x' y) end
let rec mul x y = case[mul] x | .0 -> .1 | .Suc x' -> .add y (mul x' y) end

let rec max x y =
    case x
    | .0 -> y
    | .Suc x' ->
      case y
      | .0 -> x
      | .Suc y' -> .Suc (max x' y')
      end
    end

let rec min x y =
    case x
    | .0 -> .0
    | .Suc x' ->
      case y
      | .0 -> .0
      | .Suc y' -> .Suc (min x' y')
      end
    end

let rec minus x y =
    case[minus1] y
    | .0 -> x
    | .Suc y' ->
        case[minus2] x
        | .0 -> .0
        | .Suc x' -> minus x' y'
        end
    end

let rec lt x y =
    case[lt1] x
    | .0 ->
        case[lt11] y
        | .0 -> .False
        | .Suc y -> .True
        end
    | .Suc x ->
        case[lt12] y
        | .0 -> .False
        | .Suc y -> lt x y
        end
    end

let rec lteq x y =
    case[lteq1] x
    | .0 -> .True
    | .Suc x ->
        case[lteq2] y
        | .0 -> .False
        | .Suc y -> lteq x y
        end
    end

let rec eq x y =
    case x
    | .0 ->
        case y
        | .0 -> .True
        | .Suc y' -> .False
        end
    | .Suc x' ->
        case y
        | .0 -> .False
        | .Suc y' -> eq x' y'
        end
    end

let rec app xs ys =
    case[app] xs
    | .Nil -> ys
    | .Cons x xs' -> .Cons x (app xs' ys)
    end

let rec take n xs =
    case n
    | .0 -> .Nil
    | .Suc n' ->
        case xs
        | .Nil -> .Nil
        | .Cons x xs' -> .Cons x (take n' xs')
        end
    end

let rec drop n xs =
    case n
    | .0 -> xs
    | .Suc n' ->
        case xs
        | .Nil -> .Nil
        | .Cons x xs' -> drop n' xs'
        end
    end

let rec dropWhile p xs =
    case xs
    | .Nil -> .Nil
    | .Cons x xs' ->
        case p x
        | .True -> dropWhile p xs'
        | .False -> xs
        end
    end

let rec takeWhile p xs =
    case xs
    | .Nil -> .Nil
    | .Cons x xs' ->
        case p x
        | .True -> .Cons x (takeWhile p xs')
        | .False -> .Nil
        end
    end

let rec count n xs =
    case[count1] xs
    | .Nil -> .0
    | .Cons x xs' ->
        case[count2] .eq n x
        | .True -> .Suc (count n xs')
        | .False -> count n xs'
        end
    end

let rec filter p xs =
    case xs
    | .Nil -> .Nil
    | .Cons x xs' ->
        case p x
        | .True -> .Cons x (filter p xs')
        | .False -> filter p xs'
        end
    end

let rec elem n xs =
    case xs
    | .Nil -> .False
    | .Cons x xs' ->
      case .eq n x
      | .True -> .True
      | .False -> elem n xs'
      end
    end

let rec map f xs =
    case xs
    | .Nil -> .Nil
    | .Cons x xs' ->
      .Cons (f x) (map f xs')
    end

let rec length xs =
    case xs
    | .Nil -> .0
    | .Cons x xs' -> .Suc (length xs')
    end

let null xs =
    case xs
    | .Nil -> .True
    | .Cons x xs' -> .False
    end

let rec last xs =
    case xs
    | .Nil -> _|_
    | .Cons x xs' ->
      case xs'
      | .Nil -> x
      | .Cons x' xs'' -> last xs'
      end
    end

let rec butlast xs =
    case xs
    | .Nil -> .Nil
    | .Cons x xs' ->
        case xs'
        | .Nil -> .Nil
        | .Cons x' xs'' -> .Cons x (butlast xs')
        end
    end

let butlastConcat xs ys =
    case ys
    | .Nil -> butlast xs
    | .Cons y ys' -> .app xs (.butlast ys)
    end

let rec zip xs ys =
    case xs
    | .Nil -> .Nil
    | .Cons x xs' ->
        case ys
        | .Nil -> .Nil
        | .Cons y ys' -> .Cons (.Pair x y) (zip xs' ys')
        end
    end

let zipConcat x xs ys =
    case ys
    | .Nil -> .Nil
    | .Cons y ys' -> .Cons (.Pair x y) (.zip xs ys')
    end

let snoc = fn y -> fix snoc xs ->
    case[snoc] xs
    | .Nil -> .Cons y .Nil
    | .Cons x xs' -> .Cons x (snoc xs')
    end

let rec rev xs =
    case[rev] xs
    | .Nil -> .Nil
    | .Cons x xs' -> .app (rev xs') (.Cons x .Nil)
    end

let revSnoc = fn y -> fix revSnoc xs ->
    case[revsnoc] xs
    | .Nil -> .Cons y .Nil
    | .Cons x xs' -> .app (revSnoc xs') (.Cons x .Nil)
    end

let rec ones = .Cons .1 ones

let rec isSorted xs =
    case[sorted1] xs
    | .Nil -> .True
    | .Cons x xs' ->
      case[sorted2] xs'
      | .Nil -> .True
      | .Cons y ys -> .and (.lteq x y) (isSorted xs')
      end
    end

let rec insert n xs =
    case[ins1] xs
    | .Nil -> .Cons n .Nil
    | .Cons x xs' ->
      case[ins2] .lteq n x
      | .True -> .Cons n xs
      | .False -> .Cons x (insert n xs')
      end
    end

let rec eq_insert n xs =
    case xs
    | .Nil -> .Cons n .Nil
    | .Cons x xs' ->
      case .eq n x
      | .True -> xs
      | .False -> .Cons x (eq_insert n xs')
      end
    end

let rec lt_insert n xs =
    case xs
    | .Nil -> .Cons n .Nil
    | .Cons x xs' ->
      case .lt n x
      | .True -> .Cons n xs
      | .False -> .Cons x (lt_insert n xs')
      end
    end

let rec insertsort xs =
    case[isort1] xs
    | .Nil -> .Nil
    | .Cons x xs' -> .insert x (insertsort xs')
    end

let rec delete n xs =
    case[delete1] xs
    | .Nil -> .Nil
    | .Cons x xs' ->
        case[delete2] .eq n x
        | .True -> delete n xs'
        | .False -> .Cons x (delete n xs')
        end
    end

let rec flatten t =
    case t
    | .Leaf -> .Leaf
    | .Node x t1 t2 ->
      .app (flatten t1) (.Cons x (flatten t2))
    end
