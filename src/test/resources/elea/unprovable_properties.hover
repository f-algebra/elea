/*
A file of properties which are false, which we use to test whether Hoverboard can
prove anything it shouldn't be able to.
*/

let prop_cons_mismatch = .0 =< .Nil

let prop_var_mismatch = x =< y

let prop_var_leq_cons = x =< .0

let prop_cons_leq_var = .0 =< x

let prop_mul_commutative = .mul n m =< .mul m n

let prop_add_commutative = .add n m =< .add m n

let prop_rev_rev_id_right = .rev (.rev xs) >= xs


let prop_zeno1_right =
    .app (.take n xs) (.drop n xs) >= xs

let prop_zeno3_right =
    .lteq (.count n xs) (.count n (.app xs ys)) >= .True

/*
TODO This shouldn't be provable but it is.
let prop_zeno4_right =
    .count n (.Cons n xs) >= .Suc (.count n xs)
*/

let prop_zeno6_right=
    .minus n (.add n m) >= .0

let prop_zeno7_right =
    .minus (.add n m) n >= m

let prop_zeno8_right =
    .minus (.add k m) (.add k n) >= .minus m n

let prop_zeno9_right =
    .minus (.minus n m) k >= .minus n (.add m k)

let prop_zeno48_right =
    assert .False <- .null xs in
    .app (.butlast xs) (.Cons (.last xs) .Nil) >= xs

let prop_zeno52_left =
    .count n xs =< .count n (.rev xs)

let prop_zeno52_right =
    .count n xs >= .count n (.rev xs)

let prop_zeno53_left =
    .count n (.insertsort xs) =< .count n xs

/*
This one takes ages to fail to prove. Worth investigating.
let prop_zeno53_right =
    .count n (.insertsort xs) >= .count n xs
*/

