

let prop_id_nat =
    (fix f x -> case x | .0 -> .0 | .Suc x' -> .Suc (f x') end) =< fn x -> x ;

let prop_add_is_add =
    .add x y =< .add x y ;

let prop_add_assoc =
    .add (.add x y) z =< .add x (.add y z) ;

let prop_revSnoc =
    .rev (.app xs (.Cons n .Nil)) =< .revSnoc n xs ;

let prop_rev_self_inverse =
    .rev (.rev xs) =< xs ;


let prop_zeno1 =
    .app (.take n xs) (.drop n xs) =< xs ;

let prop_zeno2 =
    .add (.count n xs) (.count n ys) == .count n (.app xs ys) ;

let prop_zeno3 =
    .lteq (.count n xs) (.count n (.app xs ys)) =< .True ;

let prop_zeno4 =
    .count n (.Cons n xs) =< .Suc (.count n xs) ;

let prop_zeno5 =
    assert .True <- .eq n m in .Suc (.count n xs) == .count n (.Cons m xs) ;

let prop_zeno6 =
    .minus n (.add n m) =< .0 ;

let prop_zeno7 =
    .minus (.add n m) n =< m ;

let prop_zeno8 =
    .minus (.add k m) (.add k n) =< .minus m n ;

let prop_zeno9 =
    .minus (.minus n m) k =< .minus n (.add m k) ;

let prop_zeno10 =
    .minus n n =< .0 ;
