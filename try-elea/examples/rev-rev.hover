(defdata List (Nil) (Cons ? List))
(defun append xs ys
    (match xs
        (Nil -> ys)
        (Cons x xs' -> Cons x (append xs' ys))))
(defun reverse xs
    (match xs
        (Nil -> Nil)
        (Cons x xs' -> append (reverse xs') (Cons x Nil))))

(defun rev-rev xs
    (reverse (reverse xs)))
